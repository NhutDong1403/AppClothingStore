import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/order.dart';
import '../services/auth_service.dart';

class OrderService {
  static const String baseUrl = 'http://localhost:7010/api/Order';
  static const String adminOrderUrl = 'http://localhost:7010/api/admin/orders';

  static Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('token');
  }

  static Future<List<Order>> fetchOrders() async {
    final token = await AuthService.getToken();
    if (token == null) {
      debugPrint("‚ùå [fetchOrders] Token kh√¥ng t·ªìn t·∫°i.");
      return [];
    }

    debugPrint("üì° [fetchOrders] G·ª≠i GET $baseUrl");

    final response = await http.get(
      Uri.parse(baseUrl),
      headers: {
        "Authorization": "Bearer $token",
        "Content-Type": "application/json",
      },
    );

    debugPrint("‚úÖ [fetchOrders] Status: ${response.statusCode}");
    debugPrint("‚úÖ [fetchOrders] Body: ${response.body}");

    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Order.fromJson(json)).toList();
    } else {
      debugPrint(
        "‚ùå [fetchOrders] API l·ªói: ${response.statusCode} - ${response.body}",
      );
      return [];
    }
  }

  static Future<List<Order>> getOrdersByUser() async {
    final token = await AuthService.getToken();
    if (token == null) throw Exception("Token kh√¥ng t·ªìn t·∫°i");

    final url = Uri.parse('$baseUrl/user');

    debugPrint("üì° [getOrdersByUser] G·ª≠i GET $url");

    final response = await http.get(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    debugPrint("‚úÖ [getOrdersByUser] Status: ${response.statusCode}");
    debugPrint("‚úÖ [getOrdersByUser] Body: ${response.body}");

    if (response.statusCode != 200) {
      throw Exception('L·∫•y ƒë∆°n h√†ng th·∫•t b·∫°i: ${response.statusCode}');
    }

    final decoded = jsonDecode(response.body);

    if (decoded is List) {
      return decoded.map((json) => Order.fromJson(json)).toList();
    }

    if (decoded is Map<String, dynamic>) {
      final data = decoded['data'];
      if (data is List) {
        return data.map((json) => Order.fromJson(json)).toList();
      }
      throw Exception('Tr∆∞·ªùng "data" kh√¥ng ph·∫£i danh s√°ch');
    }

    throw Exception('API kh√¥ng tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng h·ª£p l·ªá');
  }

  static createOrder(Order order) async {
    final token = await AuthService.getToken();
    if (token == null) throw Exception("Token kh√¥ng t·ªìn t·∫°i");

    // 1Ô∏è‚É£ Ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·ªìn kho t·ª´ng item
    for (final item in order.items) {
      debugPrint("üì° [createOrder] GET s·∫£n ph·∫©m ${item.productId}");
      final productRes = await http.get(
        Uri.parse('http://localhost:7010/api/Product/${item.productId}'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      debugPrint("‚úÖ [createOrder] Status: ${productRes.statusCode}");
      debugPrint("‚úÖ [createOrder] Body: ${productRes.body}");

      if (productRes.statusCode != 200) {
        throw Exception('‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID ${item.productId}');
      }

      final productData = jsonDecode(productRes.body);
      final List variants = productData['variants'];

      final matchedVariant = variants.firstWhere(
        (v) =>
            v['size'].toString() == item.size.toString() &&
            v['color'].toString() == item.color.toString(),
        orElse: () => throw Exception(
          '‚ùå Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ (size: ${item.size}, color: ${item.color})',
        ),
      );

      final variantId = matchedVariant['id'];
      final currentStock = matchedVariant['stock'] as int;

      debugPrint("‚ÑπÔ∏è [createOrder] T·ªìn kho hi·ªán t·∫°i: $currentStock");

      if (currentStock < item.quantity) {
        throw Exception(
          '‚ùå S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß (c√≤n $currentStock, c·∫ßn ${item.quantity})',
        );
      }

      await updateVariantStock(
        variantId,
        matchedVariant,
        currentStock - item.quantity,
        token,
      );
    }

    // 2Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng tr√™n server
    final orderPayload = {
  "userId": order.userId,
  "totalAmount": order.totalAmount,
  "items": order.items
      .map(
        (item) => {
          "productId": item.productId,
          "quantity": item.quantity,
          "size": item.size,
          "color": item.color,
        },
      )
      .toList(),
};


    debugPrint(
      "üì° [createOrder] POST t·∫°o ƒë∆°n h√†ng: ${jsonEncode(orderPayload)}",
    );

    final createOrderRes = await http.post(
      Uri.parse('http://localhost:7010/api/Order'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(orderPayload),
    );

    debugPrint("‚úÖ [createOrder] POST Status: ${createOrderRes.statusCode}");
    debugPrint("‚úÖ [createOrder] Body: ${createOrderRes.body}");

    if (createOrderRes.statusCode != 200 && createOrderRes.statusCode != 201) {
      throw Exception('‚ùå L·ªói t·∫°o ƒë∆°n h√†ng: ${createOrderRes.body}');
    }
  }

  static Future<void> updateVariantStock(
    String variantId,
    Map<String, dynamic> matchedVariant,
    int newStock,
    String token,
  ) async {
    final updatePayload = {
      "id": variantId,
      "productId": matchedVariant["productId"],
      "size": matchedVariant["size"],
      "color": matchedVariant["color"],
      "stock": newStock,
    };

    debugPrint("üì° [updateVariantStock] PUT t·ªìn kho variantId=$variantId");
    debugPrint("üìù Payload: ${jsonEncode(updatePayload)}");

    final res = await http.put(
      Uri.parse('http://localhost:7010/api/ProductVariant/$variantId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(updatePayload),
    );

    debugPrint("‚úÖ [updateVariantStock] Status: ${res.statusCode}");
    debugPrint("‚úÖ [updateVariantStock] Body: ${res.body}");

    if (res.statusCode != 200) {
      throw Exception('‚ùå L·ªói c·∫≠p nh·∫≠t kho bi·∫øn th·ªÉ: ${res.body}');
    }
  }

  static Future<List<Order>> getAllOrdersForAdmin() async {
    final token = await AuthService.getToken();
    if (token == null) throw Exception("Token kh√¥ng t·ªìn t·∫°i");

    final response = await http.get(
      Uri.parse(adminOrderUrl),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    debugPrint("‚úÖ [getAllOrdersForAdmin] Status: ${response.statusCode}");
    debugPrint("‚úÖ [getAllOrdersForAdmin] Body: ${response.body}");

    if (response.statusCode != 200) {
      throw Exception('L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng: ${response.body}');
    }

    final data = jsonDecode(response.body);
    if (data is List) {
      return data.map((json) => Order.fromJson(json)).toList();
    }

    throw Exception('API kh√¥ng tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng h·ª£p l·ªá');
  }

  static Future<void> updateOrderStatus(Order order, String newStatus) async {
    final token = await AuthService.getToken();
    if (token == null) throw Exception("Token kh√¥ng t·ªìn t·∫°i");

    final url = Uri.parse('$adminOrderUrl/${order.id}/status');
    final payload = {"status": newStatus};

    debugPrint("üì° [updateOrderStatus] PUT $url");
    debugPrint("üìù Payload: ${jsonEncode(payload)}");

    final res = await http.put(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(payload),
    );

    debugPrint("‚úÖ [updateOrderStatus] Status: ${res.statusCode}");
    debugPrint("‚úÖ [updateOrderStatus] Body: ${res.body}");

    if (res.statusCode != 200) {
      throw Exception('L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${res.body}');
    }
  }

  static Future<bool> deleteOrder(Order order) async {
    final token = await AuthService.getToken();
    if (token == null) throw Exception("Token kh√¥ng t·ªìn t·∫°i");

    final url = Uri.parse('$adminOrderUrl/${order.id}');
    debugPrint("üì° [deleteOrder] DELETE $url");

    final res = await http.delete(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    debugPrint("‚úÖ [deleteOrder] Status: ${res.statusCode}");
    debugPrint("‚úÖ [deleteOrder] Body: ${res.body}");

    if (res.statusCode == 200 || res.statusCode == 204) {
      return true;
    }

    return false;
  }
  static Future<int> getVariantId(int productId, String size, String color) async {
  // V√≠ d·ª• g·ªçi API ƒë·ªÉ l·∫•y variantId t·ª´ server
  final response = await http.get(
    Uri.parse('http://localhost:7010/api/ProductVariants/get-variant-id?productId=$productId&size=$size&color=$color'),
  );

  if (response.statusCode == 200) {
    final data = jsonDecode(response.body);
    return data['variantId'] as int;
  } else {
    throw Exception('Failed to fetch variantId');
  }
}

}
